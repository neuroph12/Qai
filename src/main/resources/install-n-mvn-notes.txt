in order to prepare raspberries there is a row of things which need be done

check the mounted disks with
df -h

this is the command to install the image on sd-card
sudo dd bs=4M if=2015-11-21-raspbian-jessie.img of=/dev/mmcblk0
with the newer version of raspbian
sudo dd bs=4M if=2016-05-27-raspbian-jessie.img of=/dev/mmcblk0

copying the image back somewhere will work with dd again, this time the other way round
sudo bs=4M if=/dev/mmcblk0 of=custom-image.img

when the raspberry is working
connect to the thing with
ssh pi@192.168.1.etc

if the thing has already been online once, ssh will refuse assuming this was a hoax
so you have to remove the key using something like:
ssh-keygen -f "/home/rainbird/.ssh/known_hosts" -R 192.168.1.etc

on the raspberry first thing to do is to run the configuration and tell it to take the whole disk- first option really
sudo raspi-config

when that all is done (setup new password, etc) in order to install maven
https://www.xianic.net/post/installing-maven-on-the-raspberry-pi/

it turns this is not right- media is mounted automatically on:
/media/pi/BET (or whatever)

but to see where things are and so on:
sudo blkid

and then of course, if that has failed- mount with something like...
sudo mount /dev/sda1 /mnt

this is for the maven modules which should be installed:
maven install works like:
mvn install:install-file -Dfile=<path-to-file> -DgroupId=<group-id> \
    -DartifactId=<artifact-id> -Dversion=<version> -Dpackaging=<packaging

and these are the files which need to be installed in order to get the whole thing to work...
unfortunately, i don't know any other way how maven can be made to use jar-libraries... it is after all a very stupid convention to have
everything to come from maven-repository

mvn install:install-file -Dfile=./lib/bliki-core-3.0.19.jar -DgroupId=info.bliki.wiki -DartifactId=bliki-core -Dversion=3.0.19 -Dpackaging=jar
mvn install:install-file -Dfile=./lib/bliki-pdf-3.0.19.jar -DgroupId=info.bliki.pdf -DartifactId=bliki-pdf -Dversion=3.0.19 -Dpackaging=jar
mvn install:install-file -Dfile=./lib/grph-1.6.29-big.jar -DgroupId=grph -DartifactId=grph.all -Dversion=1.6.29 -Dpackaging=jar
mvn install:install-file -Dfile=./lib/samsroad-1.0.jar -DgroupId=qube.samsroad -DartifactId=samsroad -Dversion=1.0 -Dpackaging=jar

you'll need to install Qai in order to satisfy Qoan's dependency- do it with skip-test option!
mvn install -Dmaven.test.skip=true
mvn install -DskipTests=true

maven's dependency tree can be checked:
mvn dependency:tree -Dverbose -Dincludes=commons-collections

when done with compiling and installing the whole- in order to run Qoan-server
mvn exec:java -Dexec.mainClass="qube.qoan.server.WebServer"

or Qai-node
mvn exec:java -Dexec.mainClass="qube.qai.main.QaiNode"

// these are for getting the latest copy of the whole
git pull rainbird@192.168.1.6:/home/rainbird/projects/work/qai
git pull rainbird@192.168.1.6:/home/rainbird/projects/work/qoan

in order to have larger memory for the JVM
-Xmx1024M -Xss128M -XX:-UseGCOverheadLimit -XX:+CMSClassUnloadingEnabled

latest configuration of boxes in intranet
192.168.1.2	- modelserver
192.168.1.3 - weber
192.168.1.4 - services-server
192.168.1.5 - qoanserver
192.168.1.6 - zenpunk
192.168.1.7 - qainode

qoan-server operates on
http://192.168.1.5:8080

qai-node operates on
192.168.1.7:5701

on services-server running:
jam-wiki:
http://192.168.1.4:8081/wiki

artifactory (removed and no longer in use)
http://192.168.1.4:8081/artifactory

jenkins (removed and no longer in use)
http://192.168.1.4:8080

agraph-server (removed and no longer in use)
starting and stopping the thing
/media/rainbird/ALEPH/qai-persistence.db/dbpedia_en/data/bin/agraph-control --config /media/rainbird/ALEPH/qai-persistence.db/dbpedia_en/data/lib/agraph.cfg start
/media/rainbird/ALEPH/qai-persistence.db/dbpedia_en/data/bin/agraph-control --config /media/rainbird/ALEPH/qai-persistence.db/dbpedia_en/data/lib/agraph.cfg stop

this will sometime become the virtuoso-server url (removed and no longer in use)
http://192.168.1.2:8890/conductor