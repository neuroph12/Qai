in order to prepare raspberries there is a row of things which need be done

check the mounted disks with
df -h

usually
umount /dev/mmcblk0p1

this is the command to install the image on sd-card
sudo dd bs=4M if=2015-11-21-raspbian-jessie.img of=/dev/mmcblk0
with the newer version of raspbian
sudo dd bs=4M if=2016-05-27-raspbian-jessie.img of=/dev/mmcblk0
with the even newer version
sudo dd bs=4M if=2017-08-16-raspbian-stretch.img of=/dev/mmcblk0

copying the image back somewhere will work with dd again, this time the other way round
sudo bs=4M if=/dev/mmcblk0 of=custom-image.img

when the raspberry is working
connect to the thing with
ssh pi@192.168.1.etc

if the thing has already been online once, ssh will refuse assuming this was a hoax
so you have to remove the key using something like:
ssh-keygen -f "/home/rainbird/.ssh/known_hosts" -R 192.168.1.etc

on the raspberry first thing to do is to run the configuration and tell it to take the whole disk- first option really
sudo raspi-config

when that all is done (setup new password, etc) in order to install maven
https://www.xianic.net/post/installing-maven-on-the-raspberry-pi/

it turns this is not right- media is mounted automatically on:
/media/pi/BET (or whatever)

but to see where things are and so on:
sudo blkid

and then of course, if that has failed- mount with something like...
sudo mount /dev/sda1 /mnt

this is for the maven modules which should be installed:
maven install works like:
mvn install:install-file -Dfile=<path-to-file> -DgroupId=<group-id> \
    -DartifactId=<artifact-id> -Dversion=<version> -Dpackaging=<packaging

and these are the files which need to be installed in order to get the whole thing to work...
unfortunately, i don't know any other way how maven can be made to use jar-libraries... it is after all a very stupid convention to have
everything to come from maven-repository

these have been eliminated already
# mvn install:install-file -Dfile=./lib/bliki-core-3.0.19.jar -DgroupId=info.bliki.wiki -DartifactId=bliki-core -Dversion=3.0.19 -Dpackaging=jar
# mvn install:install-file -Dfile=./lib/bliki-pdf-3.0.19.jar -DgroupId=info.bliki.pdf -DartifactId=bliki-pdf -Dversion=3.0.19 -Dpackaging=jar
mvn install:install-file -Dfile=./lib/grph-2.1.2-big.jar -DgroupId=grph -DartifactId=grph -Dversion=2.1.2 -Dpackaging=jar
mvn install:install-file -Dfile=./lib/thewebsemantic-1.1.jar -DgroupId=com.thewebsemantic -DartifactId=jenabean -Dversion=1.1 -Dpackaging=jar
mvn install:install-file -Dfile=./lib/samsroad-1.0.jar -DgroupId=qube.samsroad -DartifactId=samsroad -Dversion=1.0 -Dpackaging=jar

# you'll need to install Qai in order to satisfy Qoan's dependency- do it with skip-test option!
mvn install -Dmaven.test.skip=true
mvn install -DskipTests=true

# once compiled deploy the thing and upload the libraries to the artifactory
mvn deoploy
mvn -Dmdep.copyPom=true dependency:copy-dependencies

maven's dependency tree can be checked:
mvn dependency:tree -Dverbose -Dincludes=commons-collections

when done with compiling and installing the whole- in order to run Qoan-server
mvn -o exec:java -Dexec.mainClass="qube.qoan.server.WebServer"

or Qai-node
mvn -o exec:java -Dexec.mainClass="qube.qai.main.QaiNode"

// these are for getting the latest copy of the whole (from stann)
git pull rainbird@192.168.0.108:/home/rainbird/projects/work/qai
git pull rainbird@192.168.0.108:/home/rainbird/projects/work/qoan

in order to have larger memory for the JVM
-Xmx1024M -Xss128M -XX:-UseGCOverheadLimit -XX:+CMSClassUnloadingEnabled

latest configuration of boxes in intranet

192.168.0.206    - services-server wiki
192.168.0.249    - database-server mysql/artifactory
192.168.0.66     - jenkins (jenkins)
192.168.0.108    - stann
192.168.0.248    - qoansday
192.168.0.199    - monday
192.168.0.241    - tuesday
192.168.0.164    - wednesday

MySql-server and related things
remember to change mysql-server settings in /etc/mysql/my.cnf
-> has to be changed to:                        bind-address = 0.0.0.0

restart the server after changing the configuration
/etc/init.d/mysqld restart

have add the users used in configuration
in order to do that connect to server- in this case 192.168.1.7:3306
-> start mysql prompt using
mysql -h localhost -u root -p

-> create the user
create user 'sa'@'%' identified by 'sa';

-> switch databases with command
use <database_name> users/test_users/stocks/test_stocks

-> add the rights for the user- this has to be done each of the databases
grant all privileges on test_stocks.* to 'sa'@'%';
grant all privileges on stocks.* to 'sa'@'%';
grant all privileges on test_users.* to 'sa'@'%';
grant all privileges on users.* to 'sa'@'%';

-> commit all changes when done
commit;

on services-server running:
jam-wiki:
http://192.168.0.206:8081/wiki

jenkins [ 192.168.0.66 ]
http://192.168.0.66:8080/jenkins/

artifactory
http://192.168.0.249:8081/artifactory